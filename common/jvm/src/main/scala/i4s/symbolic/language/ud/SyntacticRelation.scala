package i4s.symbolic.language.ud

object SyntacticRelation extends Enumeration {
  protected case class Val(name: String) extends super.Val

  implicit def valueToPhraseTag(v: Value): Val = v.asInstanceOf[Val]

  val AdnominalClause: Val = Val("acl")
  val AdverbialClause: Val = Val("advcl")
  val AdverbModifier: Val = Val("advmod")
  val AdjectiveModifier: Val = Val("amod")
  val AppositionalModifier: Val = Val("appos")
  val Auxiliary: Val = Val("aux")
  val CaseMarker: Val = Val("case")
  val CoordinatingConjunction: Val = Val("cc")
  val ClausalComplement: Val = Val("ccomp")
  val Classifier: Val = Val("clf")
  val Compound: Val = Val("compound")
  val Conjunct: Val = Val("conj")
  val ConjunctAnd: Val = Val("conj_and")
  val ConjunctOr: Val = Val("conj_or")
  val Copula: Val = Val("cop")
  val ClausalSubject: Val = Val("csubj")
  val Dependency: Val = Val("dep")
  val Determiner: Val = Val("det")
  val Discourse: Val = Val("discourse")
  val Dislocated: Val = Val("dislocated")
  val Expletive: Val = Val("expl")
  val Fixed: Val = Val("fixed")
  val Flat: Val = Val("flat")
  val GoesWith: Val = Val("goeswith")
  val IndirectObject: Val = Val("iobj")
  val List: Val = Val("list")
  val Marker: Val = Val("mark")
  val NominalModifier: Val = Val("nmod")
  val NumericModifier: Val = Val("nummod")
  val NominalSubject: Val = Val("nsubj")
  val Object: Val = Val("obj")
  val Oblique: Val = Val("obl")
  val Orphan: Val = Val("orphan")
  val Parataxis: Val = Val("parataxis")
  val Punctuation: Val = Val("punct")
  val Reparandum: Val = Val("reparandum")
  val Root: Val = Val("root")
  val Vocative: Val = Val("vocative")
  val ObligatoryClausalComplement: Val = Val("xcomp")

  // Modifiers
  val EmphasisWord: Val = Val("emph")
  val LocativeModifier: Val = Val("lmod")
  val LightVerbConstruction: Val = Val("lvc")
  val PhrasalVerbParticle: Val = Val("prt")
  val ReduplicatedCompounds: Val = Val("redup")
  val SerialVerbCompounds: Val = Val("svc")
  val PassiveAuxiliary: Val = Val("pass")
  val Preconjunct: Val = Val("preconj")
  val ObligatorySubject: Val = Val("xsubj")
  val RelativeClause: Val = Val("relcl")
}
